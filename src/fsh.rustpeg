// Copyright (C) 2016+ Sandeep Datta

use asg::*;
use std::path::PathBuf;

// TODO: remove hardcoded EOL and add support for multiline
// function definitions

pub program -> Vec<Expression>
    = e:(complete_expr / comment)* {
        e.into_iter().filter(|x| x != &Expression::Void).collect()
    }

complete_expr -> Expression
    = e:expression EOL_OR_EOF {
        e
    }

expression -> Expression
    = e:(number / string / function_definition) comment? {
        e
    }
    
comment -> Expression
    = WS* comment_start comment_char* EOL_OR_EOF {
        Expression::Void
    }

comment_start
    = "#"

comment_char
    = !EOL .

number -> Expression
    = integer

integer -> Expression
    = WS* d:digits WS* { 
        From::from(Primitive::Int(d.parse().unwrap()))
    }

digits -> &'input str
    = $([0-9]+)

string -> Expression
    = WS* "\"" xs:str_chars "\"" WS*  { 
        From::from(Primitive::Str(xs.to_string()))
    }

str_chars -> &'input str
    = $((!"\"" .)*)

function_definition -> Expression
    = id:identifier params:function_param* token<"="> body:function_body {
        Expression::FunctionDefinition { 
            name: id.to_string(), 
            params: params,
            body: body,
        }
    }

function_param -> FunctionParam
    = id:identifier {
        FunctionParam {
            name: id.to_string(),
            param_type: "<unresolved>".to_string()
        }
    }
    
function_body -> Vec<Expression>
    = expression+

identifier -> &'input str
    = WS* e:($([_a-zA-Z][_a-zA-Z0-9]*)) WS* {
        e
    }

path -> Expression
    = p: $(path_char+) {
        From::from(Primitive::Path(PathBuf::from(p.to_string())))
    }
    
token<T> = WS* T WS*

path_char = !(WS/EOL) .

WS = [ \t]
EOL = [\n]
EOF = !.
EOL_OR_EOF = EOL / EOF
