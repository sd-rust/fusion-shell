// Copyright (C) 2015+ Sandeep Datta

- Implement ls.

- Commands
    - help
    - MFU commands: 
        history | cut -d" " -f1 | sort | uniq -c | sort -r -n -k 1 | head -50
    - show expr - dump variables and expressions to help in debug scripts.
        > a = 10  
        > show a  
        
        a = 10
        > echo a
        10
    - grep
    - find
    - ls
    - echo
    - env


- Piping (inspired by ammonite shell)
    - collection |  f -> collection.map(f)
    - collection || f -> collection.flatmap(f)
    - collection |? f -> collection.filter(f) #filter = select
    - collection |& f -> collection.reduce(f) #reduce = fold
    - collection |! f -> collection.foreach(f)
    - collection |> f -> f(collection)

- Wildcards: *,**,?,{}

- Variables
    - Setting value: 
        - Immutable: 
            - Local to current shell: x = 10
            - Exported (to other shell processes): pub x = 10
              Non string values can be passed without conversion into string 
              based representations.
            - Exported to other non shell processes: export x 
              Values must be serialized as strings. Will use the platform 
              environment variable mechanism.
        - Mutable: var y = "abc"
        - export keyword for exporting predefined variables
    - Getting value: echo $x $y
    - Not supported: Deleting: del x, y;
    - Scoping rules
    - Persistence / Serialization?
    - Value types / Reference types: Everything is a value type in shells?
        - Let numbers be value types and strings be immutable (use COW (Copy on 
          write) when someone tries to modify them)
    - Type inference
    - Automatic (predefined) variables
        - SHELL_DIR - directory containing the shell binary
        - INIT_DIR - directory from where the shell was started
        - SCRIPT_PATH, SCRIPT_DIR, SCRIPT_NAME
    - Constants
        - No separate constants. All variables are immutable by default.
    
- Data types
    - Aggregates
        - Lists: 
            let a = [a b c]
            - a.len #There is no NULL in fusion-shell
            - subscripting: a[0] # Returns an Option<T> value?
            - slicing: a[1:]
            - List comprehensions
                [[[ poly x y
                | i <- [0..], let x = m + 60*i, test x y ]
                | j <- [0..], let y = n + 60*j ]
                | m <- [1..60], n <- [1..60], mod (poly m n) 60 == k ]
        - Dictionaries
            - Dictionary comprehensions
        - Tuples
            - Indexable
            - Comparable
        - Enums (like in Rust)
        - Option
        - Result

    - Strings
        - Type name: str
        - Intrapolation: 
            - "Name: $name"
            - "width: ${width}px"
            - Quotation: "", """ """
        - Accept escape chars (even in bare strings): \e, \r, \n, \t, \x, \U etc
        - Conversion function: toStr
    - Chars
        - Type name: char
        - 'a', 'b', '\e' etc.

- Functions
    - say_hello name = echo Hello $name
      say_hello world
    - type str -> str -> str
      say_greeting greeting name = echo $greeting, $name
      say_greeting Hello world\!
      
    - say_greeting greeting:str name:str -> str = echo $greeting, $name
      say_greeting Hello world\!
    
    - Nested functions / closures
    - Partial functions / commands
        Note: there is a lot of cursor movement while doing the following...
            mv abc xyz
            mv def xyz
        The user should be able to something like...
            mv _ xyz abc # (mv _ xyz) is saved in history as a partial command
            !! def
    - repeat func times: int = 
        func
        repeat func (times - 1)
      repeat _ 5 <| say_hello world  
      
    - Named parameters (as flags)
        - socket -server serverProc 9876 
            - Note: 'server' is a named boolean parameter. Its value is assumed 
              to be false when the flag is not specified.
            - socket server:Bool proc port
    - Support optional parameters
    - Lambdas: 
        x y => x == y
        () => $a
        x => len x

- External commands
    - External commands will be wrapped by a launcher which translates their 
      exit status into Result<(),int>

- Operators
    - Overloaded
        - For example: + works for both addition and concatenation. Causes 
          syntax error when the operands are not compatible.
    - Precedence
    (+) - Add/Append. Works for numbers, strings, paths etc.
    - Infixr, Infixl
    
- Control flow
    - if/else: Conditionals if / else.
        - Allow checking exit status like fish shell
    - loops
    - No switch, use pattern matching (match x)

- Error handling
    - Option
    - Result
    - Mandatory exit code checking. Returned Result<_,_> cannot be ignored.
        - Use ignore() function to wrap steps which are allowed to fail.

- Pattern matching
    - List patterns
    - Dictionary patterns
    - slice patterns
    - Binary patterns (using list/string patterns?)
        - Must support endian agnostic matching (if specified)
    - regex patterns
    - literal matches
    - Guards

- Structs?

- Namespaces?

- Modules 
    - File is the basic unit of modularity?
    - import abc
    - import os (self, chdir) # Import the chdir function from the os module 
                              # along with the module name itself.

- Regular expressions
    - Regex literal: r/abc/ig
    - Operators: =~

- Dictionaries / Anonymous classes: d = {x:1 y:2}; d = (dict [a b c d])

- Numeric literals: 
    - Support hex, octal, binary literals
    - Allow underscore separators for readability

- Redirection
    - >, >>
    - <, <<
    - 2>
    - 2>&1
    - serializes to/from yaml/xml?
    - NOTE: Redirection and piping should work for both external and internal 
      commands. The user should be able to pipe output from external commands 
      to internal commands and vice-versa.

- Add support for external commands: `ls, `ag etc

- libfusion / libfsh
    - Can be used by regular apps to interact with fusion shell
        - Apps can use data types defined by the shell
        - Introduce new data types to the shell
        - Participate in the object pipeline / redirection mechanism
    - Available as a Rust crate and as a C library!

- Libraries / Modules
    - Networking module
        - Modeled after the TCL networking model.
